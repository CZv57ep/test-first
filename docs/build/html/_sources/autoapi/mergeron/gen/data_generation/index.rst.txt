mergeron.gen.data_generation
============================

.. py:module:: mergeron.gen.data_generation

.. autoapi-nested-parse::

   Methods to generate data for analyzing merger enforcement policy.





Module Contents
---------------

.. py:class:: SamplingFunctionKWArgs

   Bases: :py:obj:`TypedDict`


   Keyword arguments of function, :func:`MarketSample.sim_enf_cnts`


   .. py:attribute:: sample_size
      :type:  int

      number of draws to generate


   .. py:attribute:: seed_seq_list
      :type:  collections.abc.Sequence[numpy.random.SeedSequence] | None

      sequence of SeedSequences to ensure replicable data generation with
      appropriately independent random streams

      .. rubric:: Notes

      See, :func:`.data_generation_functions.parse_seed_seq_list` for more on
      specification of this parameter.


   .. py:attribute:: nthreads
      :type:  int

      number of parallel threads to use


   .. py:attribute:: save_data_to_file
      :type:  mergeron.gen.upp_tests.SaveData

      optionally save data to HDF5 file


   .. py:attribute:: saved_array_name_suffix
      :type:  str

      optionally specify a suffix for the HDF5 array names


.. py:class:: MarketSample

   Parameter specification for market data generation.


   .. py:attribute:: share_spec
      :type:  mergeron.gen.ShareSpec

      Market-share specification, see :class:`ShareSpec`


   .. py:attribute:: pcm_spec
      :type:  mergeron.gen.PCMSpec

      Margin specification, see :class:`PCMSpec`


   .. py:attribute:: price_spec
      :type:  mergeron.gen.PriceSpec

      Price specification, see :class:`PriceSpec`


   .. py:attribute:: hsr_filing_test_type
      :type:  mergeron.gen.SSZConstants

      Method for modeling HSR filing threholds, see :class:`SSZConstants`


   .. py:attribute:: data
      :type:  mergeron.gen.MarketDataSample


   .. py:attribute:: enf_counts
      :type:  mergeron.gen.UPPTestsCounts


   .. py:method:: gen_market_sample(/, *, sample_size = 10**6, seed_seq_list = None, nthreads = 16, save_data_to_file = False, saved_array_name_suffix = '')

      Generate share, diversion ratio, price, and margin data for MarketSpec.

      see :attr:`SamplingFunctionKWArgs` for description of parameters

      :returns: Merging firms' shares, margins, etc. for each hypothetical  merger
                in the sample



   .. py:method:: generate_sample(/, *, sample_size = 10**6, seed_seq_list, nthreads, save_data_to_file = False, saved_array_name_suffix = '')

      Generate market data



   .. py:method:: sim_enf_cnts(_upp_test_parms, _sim_test_regime, /, *, sample_size = 10**6, seed_seq_list = None, nthreads = 16, save_data_to_file = False, saved_array_name_suffix = '')

      Generate market data and etstimate UPP test counts on same.

      :param _upp_test_parms: Guidelines thresholds for testing UPP and related statistics
      :param _sim_test_regime: Configuration to use for testing; UPPTestsRegime object
                               specifying whether investigation results in enforcement, clearance,
                               or both; and aggregation methods used for GUPPI and diversion ratio
                               measures
      :param sample_size: Number of draws to generate
      :param seed_seq_list: List of seed sequences, to assure independent samples in each thread
      :param nthreads: Number of parallel processes to use
      :param save_data_to_file: Whether to save data to an HDF5 file, and where to save it
      :param saved_array_name_suffix: Suffix to add to the array names in the HDF5 file

      :returns: UPPTestCounts ojbect with  of test counts by firm count, Î”HHI and concentration zone



   .. py:method:: sim_enf_cnts_ll(_enf_parm_vec, _sim_test_regime, /, *, sample_size = 10**6, seed_seq_list = None, nthreads = 16, save_data_to_file = False, saved_array_name_suffix = '')

      A function to parallelize data-generation and testing

      The parameters `_sim_enf_cnts_kwargs` are passed unaltered to
      the parent function, `sim_enf_cnts()`, except that, if provided,
      `seed_seq_list` is used to spawn a seed sequence for each thread,
      to assure independent samples in each thread, and `nthreads` defines
      the number of parallel processes used. The number of draws in
      each thread may be tuned, by trial and error, to the amount of
      memory (RAM) available.

      :param _enf_parm_vec: Guidelines thresholds to test against
      :param _sim_test_regime: Configuration to use for testing
      :param sample_size: Number of draws to simulate
      :param seed_seq_list: List of seed sequences, to assure independent samples in each thread
      :param nthreads: Number of parallel processes to use
      :param save_data_to_file: Whether to save data to an HDF5 file, and where to save it
      :param saved_array_name_suffix: Suffix to add to the array names in the HDF5 file

      :returns: Arrays of UPPTestCounts



   .. py:method:: estimate_enf_counts(_enf_parm_vec, _upp_test_regime, /, *, sample_size = 10**6, seed_seq_list, nthreads, save_data_to_file = False, saved_array_name_suffix = '')

      Estimate enforcement counts

      :param _enf_parm_vec: Threshold values for various Guidelines criteria
      :param _upp_test_regime: Specifies whether to analyze enforcement, clearance, or both
                               and the GUPPI and diversion ratio aggregators employed, with
                               default being to analyze enforcement based on the maximum
                               merging-firm GUPPI and maximum diversion ratio between the
                               merging firms
      :param sample_size: Size of the market sample drawn
      :param seed_seq_list: List of :code:`numpy.random.SeedSequence` objects
      :param nthreads: Number of threads to use
      :param save_data_to_file: Save data to given HDF5 file, at specified group node
      :param saved_array_name_suffix: Suffix to add to the array names in the HDF5 file

      :rtype: None



