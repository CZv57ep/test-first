mergeron.gen.upp_tests
======================

.. py:module:: mergeron.gen.upp_tests

.. autoapi-nested-parse::

   Methods to compute intrinsic clearance rates and intrinsic enforcement rates
   from generated market data.









Module Contents
---------------

.. py:data:: SaveData
   :type:  TypeAlias
   :value: Literal[False] | tuple[Literal[True], ptb.File, ptb.Group]


.. py:class:: INVRESCntsArgs

   Bases: :py:obj:`TypedDict`


   Keyword arguments of function, :code:`sim_enf_cnts`


   .. py:attribute:: sample_size
      :type:  int


   .. py:attribute:: seed_seq_list
      :type:  list[numpy.random.SeedSequence] | None


   .. py:attribute:: nthreads
      :type:  int


   .. py:attribute:: save_data_to_file
      :type:  SaveData


   .. py:attribute:: saved_array_name_suffix
      :type:  str


.. py:function:: enf_cnts(_market_data_sample, _upp_test_parms, _upp_test_regime, /)

   Estimate enforcement and clearance counts from market data sample

   :param _market_data_sample: Market data sample
   :param _upp_test_parms: Threshold values for various Guidelines criteria
   :param _upp_test_regime: Specifies whether to analyze enforcement, clearance, or both
                            and the GUPPI and diversion ratio aggregators employed, with
                            default being to analyze enforcement based on the maximum
                            merging-firm GUPPI and maximum diversion ratio between the
                            merging firms

   :returns: Enforced and cleared counts
   :rtype: UPPTestsCounts


.. py:function:: gen_upp_test_arrays(_market_data, _upp_test_parms, _sim_test_regime, /)

   Generate UPP tests arrays for given configuration and market sample

   Given a standards vector, market

   :param _market_data: market data sample
   :param _upp_test_parms: guidelines thresholds for testing UPP and related statistics
   :param _sim_test_regime: configuration to use for generating UPP tests


.. py:function:: initialize_hd5(_h5_path, _hmg_pub_year, _test_regime, /)

.. py:function:: save_data_to_hdf5(_dclass, /, *, saved_array_name_suffix = '', excluded_attrs = (), save_data_to_file = False)

.. py:function:: save_array_to_hdf5(_array_obj, _array_name, _h5_group, _h5_file, /, *, saved_array_name_suffix = None)

