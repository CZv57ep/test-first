mergeron.ext.proportions_tests
==============================

.. py:module:: mergeron.ext.proportions_tests

.. autoapi-nested-parse::

   Functions to estimate confidence intervals for
       (a.) a proportion or muliple proportions, and (b.) contrast between
       two independent proportions or two series of independent propotions.









Module Contents
---------------

.. py:data:: TI

.. py:function:: propn_ci(_npos = 4, _nobs = 10, /, *, alpha = 0.05, method = 'Wilson')

   Returns point estimates and confidence interval for a proportion

   Methods "Clopper-Pearson" and "Exact" are synoymous [3]_.  Similarly,
   "Wilson" and "Score" are synonyms here.

   :param _npos: Number of positives
   :param _nobs: Number of observed values
   :param alpha: Significance level
   :param method: Method to use for estimating confidence interval

   :returns: Raw and estimated proportions, and bounds of the confidence interval

   .. rubric:: References

   .. [3] Alan Agresti & Brent A. Coull (1998) Approximate is Better
      than “Exact” for Interval Estimation of Binomial Proportions,
      The American Statistician, 52:2, 119-126,
      https://doi.org/10.1080/00031305.1998.10480550


.. py:function:: propn_ci_multinomial(_counts, /, *, alpha = 0.05, method = 'goodman', alternative = 'default')

   Confidence intervals for multiple proportions.

   :param _counts: `n x 2` np.array of multinomial counts
   :param alpha: Significance level
   :param method: Method used to computer confidence intervals
   :param alternative: Method used to estimate standard errors, whether "default"
                       or "simplified"

   :returns: Array of confidence intervals


.. py:function:: propn_diff_ci(_npos1 = 4, _nobs1 = 10, _npos2 = 4, _nobs2 = 10, /, *, alpha = 0.05, method = 'M-N')

   Confidence intervals for differences in binomial proportions.

   Methods available are Agresti-Caffo [4]_, Mee [5]_, Meitinen-Nurminen [5]_ [6]_
   and Newcombe (aka, Score method) [5]_. See also, source code for the
   R-language function BinomDiffCI, in the module StatsAndCIs [7]_.

   :param _npos1: Counts of positive outcomes in the respective binomial distributions
   :param _npos2: Counts of positive outcomes in the respective binomial distributions
   :param _nobs1: Counts of all outcomes in the respective binomial distributions
   :param _nobs2: Counts of all outcomes in the respective binomial distributions
   :param alpha: Significance level
   :param method: Method used to compute confidence intervals

   :returns: Raw and expected values of estimated difference, with bounds of c.i.

   .. rubric:: References

   .. [4] Agresti, A., & Caffo, T. (2000). Simple and Effective
      Confidence Intervals for Proportions and Differences of Proportions
      Result from Adding Two Successes and Two Failures.
      The American Statistician, 54(4), 280--288. https://doi.org/10.2307/2685779

   .. [5] Newcombe, R.G. (1998). Two-sided confidence intervals for
      the single proportion: comparison of seven methods. Statist. Med., 17: 857-872.
      https://doi.org/10.1002/(SICI)1097-0258(19980430)17:8%3C857::AID-SIM777%3E3.0.CO;2-E

   .. [6] Miettinen, O. and Nurminen, M. (1985). Comparative analysis of two rates.
       Statist. Med., 4: 213-226. https://doi.org/10.1002/sim.4780040211; Appendix I

   .. [7] StatsAndCIs.r, function BinomDiffCI, method, "mn"
      https://github.com/cran/DescTools/blob/master/R/StatsAndCIs.r
      (R source code is distributed under the CC-BY license.)


.. py:function:: propn_diff_ci_multinomial(_counts, /, *, alpha = 0.05)

   Estimate confidence intervals of pair-wise differences in multinomial proportions

   Differences in multinomial proportions sum to zero.

   :param _counts: Two dimensional np.array of observed values of multinomial distributions
                   (in columns).
   :param alpha: Significance level

   :returns: Array of confidence intervals


.. py:class:: MultinomialPropnsTest

   .. py:attribute:: estimate
      :type:  numpy.float64


   .. py:attribute:: dof
      :type:  int


   .. py:attribute:: critical_value
      :type:  numpy.float64


   .. py:attribute:: p_value
      :type:  numpy.float64


.. py:function:: propn_test_multinomial(_counts, /, *, alpha = 0.05)

   Chi-square test for homogeneity of differences in multinomial proportions.

   Differences in multinomial proportions sum to zero.

   :param _counts: Two dimensional array of observed values of multinomial distributions
                   (in columns).
   :param alpha: Significance level

   :returns: Estimated statistic, degrees of freedom, critical value, p-value


